using UnityEngine;
using UnityEngine.UI;

public class GameUIManager : MonoBehaviour
{
    [Header("Menu UI - S·∫Ω b·ªã ·∫©n khi v√†o game")]
    [SerializeField] private Button _hostButton;
    [SerializeField] private Button _clientButton;
    [SerializeField] private InputField _playerNameInput;
    [SerializeField] private GameObject _menuPanel; // Panel ch·ª©a menu (Host/Client buttons, InputField)
    
    [Header("In-Game UI - V·∫´n hi·ªÉn th·ªã trong game")]
    [SerializeField] private Text _statusText; // Status text hi·ªÉn th·ªã c·∫£ trong menu v√† game
    [SerializeField] private GameObject _gameUI;
    
    [Header("Win Panel")]
    [SerializeField] private GameObject _winPanel; // Panel hi·ªÉn th·ªã khi th·∫Øng
    [SerializeField] private Text _winnerText; // Text hi·ªÉn th·ªã t√™n ng∆∞·ªùi th·∫Øng
    [SerializeField] private Button _backToMenuButton; // N√∫t quay l·∫°i menu
    
    private GameNetworkManager _networkManager;

    private void Start()
    {
        // T√¨m GameNetworkManager v·ªõi safety check
        try
        {
            _networkManager = FindFirstObjectByType<GameNetworkManager>();
        }
        catch (System.Exception e)
        {
            Debug.LogError($"L·ªói khi t√¨m GameNetworkManager: {e.Message}");
        }
        
        if (_networkManager == null)
        {
            Debug.LogError("Kh√¥ng t√¨m th·∫•y GameNetworkManager! Vui l√≤ng th√™m script GameNetworkManager v√†o scene.");
            // Kh√¥ng return ƒë·ªÉ v·∫´n setup UI
        }

        if (_hostButton != null)
        {
            _hostButton.onClick.AddListener(StartHost);
            // Th√™m tooltip an to√†n
            var hostText = _hostButton.GetComponentInChildren<Text>();
            if (hostText != null)
            {
                hostText.text = "Start Host (T·∫°o ph√≤ng)";
            }
            else
            {
                Debug.LogWarning("Host button kh√¥ng c√≥ Text component!");
            }
        }
        else
        {
            Debug.LogWarning("Host button ch∆∞a ƒë∆∞·ª£c assign!");
        }

        if (_clientButton != null)
        {
            _clientButton.onClick.AddListener(StartClient);
            // Th√™m tooltip an to√†n
            var clientText = _clientButton.GetComponentInChildren<Text>();
            if (clientText != null)
            {
                clientText.text = "Start Client (Join ph√≤ng)";
            }
            else
            {
                Debug.LogWarning("Client button kh√¥ng c√≥ Text component!");
            }
        }
        else
        {
            Debug.LogWarning("Client button ch∆∞a ƒë∆∞·ª£c assign!");
        }

        // Setup Win Panel button
        if (_backToMenuButton != null)
        {
            _backToMenuButton.onClick.AddListener(OnBackToMenuFromWin);
        }
        
        // ·∫®n win panel l√∫c b·∫Øt ƒë·∫ßu
        if (_winPanel != null)
        {
            _winPanel.SetActive(false);
        }

        // Safety check cho status update
        try
        {
            UpdateStatus("S·∫µn s√†ng k·∫øt n·ªëi\nHost: T·∫°o ph√≤ng | Client: Join ph√≤ng");
        }
        catch (System.Exception e)
        {
            Debug.LogError($"L·ªói khi update status: {e.Message}");
        }
    }

    private void StartHost()
    {
        if (_networkManager != null)
        {
            SetPlayerName(); // ƒê·∫∑t t√™n player tr∆∞·ªõc khi start
            _networkManager.StartHost();
            UpdateStatus("ƒêang t·∫°o ph√≤ng...");
            HideMenuPanel(); // ·∫®n menu panel
            ShowGameUI();
        }
        else
        {
            UpdateStatus("L·ªói: Kh√¥ng t√¨m th·∫•y GameNetworkManager!");
        }
    }

    private void StartClient()
    {
        if (_networkManager != null)
        {
            SetPlayerName(); // ƒê·∫∑t t√™n player tr∆∞·ªõc khi start
            // Th√™m delay nh·ªè ƒë·ªÉ ƒë·∫£m b·∫£o Host ƒë√£ s·∫µn s√†ng
            Invoke(nameof(DelayedClientStart), 2f); // TƒÉng delay l√™n 2 gi√¢y
            UpdateStatus("ƒêang k·∫øt n·ªëi...");
            HideMenuPanel(); // ·∫®n menu panel
            ShowGameUI();
        }
        else
        {
            UpdateStatus("L·ªói: Kh√¥ng t√¨m th·∫•y GameNetworkManager!");
        }
    }
    
    private void SetPlayerName()
    {
        Debug.Log($"SetPlayerName called. InputField assigned: {_playerNameInput != null}");
        
        if (_playerNameInput != null)
        {
            Debug.Log($"InputField text value: '{_playerNameInput.text}' (length: {_playerNameInput.text.Length})");
            
            string inputName = _playerNameInput.text.Trim(); // X√≥a kho·∫£ng tr·∫Øng th·ª´a
            
            if (!string.IsNullOrEmpty(inputName))
            {
                // L∆∞u t√™n player v√†o PlayerPrefs
                PlayerPrefs.SetString("PlayerName", inputName);
                PlayerPrefs.Save(); // Force save ngay l·∫≠p t·ª©c
                Debug.Log($"‚úì Player name saved to PlayerPrefs: '{inputName}'");
                
                // Verify l·∫°i
                string savedName = PlayerPrefs.GetString("PlayerName", "ERROR");
                Debug.Log($"‚úì Verified saved name: '{savedName}'");
            }
            else
            {
                // T√™n m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng nh·∫≠p
                string defaultName = "Player" + UnityEngine.Random.Range(100, 999);
                PlayerPrefs.SetString("PlayerName", defaultName);
                PlayerPrefs.Save();
                Debug.LogWarning($"InputField is empty, using default name: {defaultName}");
            }
        }
        else
        {
            // InputField kh√¥ng ƒë∆∞·ª£c assign
            string defaultName = "Player" + UnityEngine.Random.Range(100, 999);
            PlayerPrefs.SetString("PlayerName", defaultName);
            PlayerPrefs.Save();
            Debug.LogError($"‚ùå PlayerNameInput is NULL! Using default name: {defaultName}");
            Debug.LogError("Please assign the InputField in GameUIManager Inspector!");
        }
    }
    
    private void DelayedClientStart()
    {
        _networkManager.StartClient();
    }

    private void UpdateStatus(string message)
    {
        if (_statusText != null)
        {
            _statusText.text = message;
        }
        else
        {
            Debug.LogWarning("Status Text ch∆∞a ƒë∆∞·ª£c assign trong GameUIManager!");
        }
            
        Debug.Log($"Status: {message}");
    }
    
    // Public method ƒë·ªÉ c√°c script kh√°c c√≥ th·ªÉ c·∫≠p nh·∫≠t status
    public void UpdateGameStatus(string message)
    {
        UpdateStatus(message);
    }

    private void ShowGameUI()
    {
        if (_gameUI != null)
            _gameUI.SetActive(true);
    }
    
    private void HideMenuPanel()
    {
        if (_menuPanel != null)
        {
            _menuPanel.SetActive(false);
            Debug.Log("Menu panel ƒë√£ ƒë∆∞·ª£c ·∫©n");
        }
        else
        {
            Debug.LogWarning("Menu Panel ch∆∞a ƒë∆∞·ª£c assign trong GameUIManager!");
        }
    }
    
    private void ShowMenuPanel()
    {
        if (_menuPanel != null)
        {
            _menuPanel.SetActive(true);
            Debug.Log("Menu panel ƒë√£ ƒë∆∞·ª£c hi·ªán");
        }
        else
        {
            Debug.LogWarning("Menu Panel ch∆∞a ƒë∆∞·ª£c assign trong GameUIManager!");
        }
    }
    
    // Method public ƒë·ªÉ c√°c script kh√°c c√≥ th·ªÉ g·ªçi
    public void BackToMenu()
    {
        ShowMenuPanel();
        
        // ·∫®n game UI n·∫øu c√≥
        if (_gameUI != null)
            _gameUI.SetActive(false);
        
        // ·∫®n win panel n·∫øu ƒëang hi·ªán
        if (_winPanel != null)
            _winPanel.SetActive(false);
            
        UpdateStatus("S·∫µn s√†ng k·∫øt n·ªëi\nHost: T·∫°o ph√≤ng | Client: Join ph√≤ng");
    }
    
    public void ShowWinPanel(string winnerName)
    {
        Debug.Log($"ShowWinPanel called with winner: {winnerName}");
        
        if (_winPanel != null)
        {
            _winPanel.SetActive(true);
            
            if (_winnerText != null)
            {
                _winnerText.text = $"üèÜ {winnerName} Wins! üèÜ";
            }
            
            Debug.Log("Win panel ƒë√£ ƒë∆∞·ª£c hi·ªÉn th·ªã");
        }
        else
        {
            Debug.LogWarning("Win Panel ch∆∞a ƒë∆∞·ª£c assign trong GameUIManager!");
        }
    }
    
    private void OnBackToMenuFromWin()
    {
        Debug.Log("Quay l·∫°i menu t·ª´ Win Panel");
        
        // Ng·∫Øt k·∫øt n·ªëi m·∫°ng
        if (_networkManager != null)
        {
            var runner = FindFirstObjectByType<Fusion.NetworkRunner>();
            if (runner != null)
            {
                runner.Shutdown();
            }
        }
        
        // Quay l·∫°i menu
        BackToMenu();
    }
    
    private void Update()
    {
        // Hi·ªÉn th·ªã s·ªë ng∆∞·ªùi ch∆°i v√† tr·∫°ng th√°i game
        var gameStateManager = FindFirstObjectByType<GameStateManager>();
        if (gameStateManager != null)
        {
            switch (gameStateManager.CurrentState)
            {
                case GameStateManager.GameState.WaitingForPlayers:
                    UpdateStatus($"ƒêang ch·ªù ng∆∞·ªùi ch∆°i... ({gameStateManager.PlayerCount}/2)");
                    break;
                case GameStateManager.GameState.Playing:
                    UpdateStatus($"Game ƒëang ch∆°i - S·ªë ng∆∞·ªùi ch∆°i: {gameStateManager.PlayerCount}");
                    break;
                case GameStateManager.GameState.GameOver:
                    // Kh√¥ng c·∫≠p nh·∫≠t g√¨ th√™m, win panel ƒë√£ hi·ªÉn th·ªã
                    break;
            }
        }
    }
}
